/*
 * MainForm.java
 *
 * Created on July 21, 2004, 7:08 PM
 */

package org.ngss.jdirdiff;

import javax.swing.*;

import java.awt.*;
import java.io.*;
import java.util.Arrays;
import java.util.Comparator;

/**
 * Main form.
 * @author ngeor
 */
public class MainForm extends JFrame {
    private javax.swing.JButton btnCompare;
    private javax.swing.JButton btnMakeZip;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JList lstFiles;

    /**
     * Creates new form MainForm.
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jToolBar1 = new javax.swing.JToolBar();
        btnCompare = new javax.swing.JButton();
        btnMakeZip = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstFiles = new javax.swing.JList();

        setTitle("jDirDiff");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        btnCompare.setText("Compare");
        btnCompare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompareActionPerformed(evt);
            }
        });

        jToolBar1.add(btnCompare);

        btnMakeZip.setText("Make Zip");
        btnMakeZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeZipActionPerformed(evt);
            }
        });

        jToolBar1.add(btnMakeZip);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        lstFiles.setModel(new DefaultListModel());
        lstFiles.setCellRenderer(new MyCellRenderer());
        jScrollPane1.setViewportView(lstFiles);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        final int width = 400;
        final int height = 300;
        setBounds((screenSize.width - width) / 2, (screenSize.height - height) / 2, width, height);
    }

    private void btnMakeZipActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultListModel listModel = (DefaultListModel) lstFiles.getModel();
        for (int i = 0; i < listModel.size(); i++) {
            Object o = listModel.get(i);
            if (o instanceof NewFileItem || o instanceof ChangedFileItem) {
                OneFileItem ofi = (OneFileItem) o;
                System.out.println(ofi.getFile());
            }
        }
        infoMsg("Make a file with those filenames, then run cat file | zip source -@");
    }

    /**
     * A comparator for files.
     */
    class FileNameComparator implements Comparator {

        @Override
        public int compare(Object o1, Object o2) {
            File f1 = (File) o1;
            File f2 = (File) o2;
            return f1.getName().compareTo(f2.getName());
        }

    }

    private boolean equalFiles(File oldFile, File newFile) throws FileNotFoundException, IOException {
        if (oldFile.length() != newFile.length()) {
            return false;
        }

        BufferedInputStream oldData = new BufferedInputStream(new FileInputStream(oldFile));
        BufferedInputStream newData = new BufferedInputStream(new FileInputStream(newFile));
        try {
            int oldBt;
            int newBt;
            do {
                oldBt = oldData.read();
                newBt = newData.read();
                if (oldBt != newBt) {
                    return false;
                }

            } while (oldBt != -1 && newBt != -1);

            return true;
        } finally {
            oldData.close();
            newData.close();
        }
    }

    private boolean areBothDirectories(File a, File b) {
        return a.isDirectory() && b.isDirectory();
    }

    private boolean areBothFiles(File a, File b) {
        return !a.isDirectory() && !b.isDirectory();
    }

    private void handleEqualFiles(DefaultListModel listModel, File oldFile, File newFile) {
        if (areBothDirectories(oldFile, newFile)) {
            compareDirectories(oldFile, newFile);
        } else if (areBothFiles(oldFile, newFile)) {
            try {
                if (!equalFiles(oldFile, newFile)) {
                    listModel.addElement(new ChangedFileItem(newFile));
                }
            } catch (IOException ex) {
                listModel.addElement(ex);
            }
        } else {
            listModel.addElement("File <-> Dir! " + newFile);
        }
    }

    private void compareDirectories(File oldDir, File newDir) {
        File[] oldDirFiles = oldDir.listFiles();
        File[] newDirFiles = newDir.listFiles();
        FileNameComparator fnc = new FileNameComparator();
        Arrays.sort(oldDirFiles, fnc);
        Arrays.sort(newDirFiles, fnc);
        int iOld = 0;
        int iNew = 0;
        DefaultListModel listModel = (DefaultListModel) lstFiles.getModel();
        while (iOld < oldDirFiles.length && iNew < newDirFiles.length) {
            File oldFile = oldDirFiles[iOld];
            File newFile = newDirFiles[iNew];
            int cmp = fnc.compare(oldFile, newFile);
            if (cmp == 0) {
                handleEqualFiles(listModel, oldFile, newFile);
                iOld++;
                iNew++;
            } else if (cmp < 0) {
                listModel.addElement(new OldFileItem(oldFile));
                iOld++;
            } else /* cmp > 0 */ {
                listModel.addElement(new NewFileItem(newFile));
                iNew++;
            }
        }
    }

    private void btnCompareActionPerformed(java.awt.event.ActionEvent evt) {
        File fileOldDirectory;
        File fileNewDirectory;
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setDialogTitle("Please select the original directory");
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileOldDirectory = fc.getSelectedFile();
            fc.setDialogTitle("Please select the modified directory");
            if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                fileNewDirectory = fc.getSelectedFile();
                confirmCompareDirectories(fileOldDirectory, fileNewDirectory);
            }
        }
    }

    private void confirmCompareDirectories(File oldDir, File newDir) {
        if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(
            this, "Compare " + oldDir + " with " + newDir + "?", "Confirmation", JOptionPane.YES_NO_OPTION)) {
            ((DefaultListModel) lstFiles.getModel()).clear();
            compareDirectories(oldDir, newDir);
            infoMsg("Finished");
        }
    }

    /**
     * Exit the Application.
     */
    private void exitForm(java.awt.event.WindowEvent evt) {
        System.exit(0);
    }

    private void infoMsg(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Information", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        MainForm frm = new MainForm();
        frm.show();
        if (args.length == 2) {
            File oldDir = new File(args[0]);
            File newDir = new File(args[1]);
            frm.confirmCompareDirectories(oldDir, newDir);
        }
    }

    /**
     * Custom cell renderer.
     */
    class MyCellRenderer extends JLabel implements ListCellRenderer {
        MyCellRenderer() {
            setOpaque(true);
        }

        /**
         * Gets the component.
         */
        public Component getListCellRendererComponent(
            JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value instanceof OneFileItem) {
                setText(value.toString());
                if (value instanceof NewFileItem) {
                    setBackground(isSelected ? Color.green : Color.white);
                    setForeground(isSelected ? Color.white : Color.green);
                } else if (value instanceof OldFileItem) {
                    setBackground(isSelected ? Color.red : Color.white);
                    setForeground(isSelected ? Color.white : Color.red);
                } else {
                    setBackground(isSelected ? Color.blue : Color.white);
                    setForeground(isSelected ? Color.white : Color.blue);
                }
            } else {
                setText(value.toString());
                setBackground(isSelected ? Color.black : Color.white);
                setForeground(isSelected ? Color.white : Color.black);
            }
            return this;
        }
    }

}
