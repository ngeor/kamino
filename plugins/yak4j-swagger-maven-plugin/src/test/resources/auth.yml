swagger: '2.0'
info:
  title: Authentication API
  description: Authentication service
  version: "1.0.0"
  license:
    name: Private License
    url: https://auth.acme.com/
  contact:
    url: https://auth.acme.com/
    email: contact@acme.com

# the domain of the service
host: auth.acme.com

# array of all schemes that your API supports
schemes:
- https

# will be prefixed to all paths
basePath: /v1
produces:
- application/json

securityDefinitions:
  jwtAuth:
    type: apiKey
    in: header
    name: Authorization
    description: |
      JWT Access Token (e.g. Authorization: Bearer access-token)
  clientId:
    type: apiKey
    in: header
    name: ClientId
    description: |
      In case of a user that belongs to multiple clients,
      this header can identify which client is active
      within the API call.

paths:

  #
  # Login, VerifyToken, RefreshToken.
  # Essential operations for the authentication.
  #

  /login:
    post:
      operationId: login
      summary: Login to the service
      tags:
      - Authentication
      parameters:
      - name: credentials
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      responses:
        200:
          description: The result of the login operation
          schema:
            $ref: '#/definitions/LoginResult'
        400:
          description: Invalid request
          schema:
            $ref: './error.yml#/ErrorInfo'
        403:
          description: User not found or user not confirmed
          schema:
            $ref: './error.yml#/ErrorInfo'

  /token:
    post:
      operationId: verifyToken
      summary: Verify an access token and returns information about the user who holds it
      tags:
      - Verification
      parameters:
      - name: token
        in: body
        required: true
        schema:
          type: string
      responses:
        200:
          description: The result of the verification
          schema:
            $ref: '#/definitions/TokenVerificationResult'
        400:
          description: Invalid request or malformed token
          schema:
            $ref: './error.yml#/ErrorInfo'

  /refresh-token:
    post:
      operationId: refreshToken
      summary: Refresh an access token and returns information about the user who holds it
      tags:
      - Authentication
      parameters:
      - name: refreshToken
        in: body
        required: true
        schema:
          type: string
      responses:
        200:
          description: The result of the new login with the refresh token
          schema:
            $ref: '#/definitions/LoginResult'
        400:
          description: Invalid request or malformed token
          schema:
            $ref: './error.yml#/ErrorInfo'

  #
  # Sign up, confirm sign up, check availability of e-mail
  #

  /sign-up:
    post:
      operationId: signUp
      summary: Sign up as a new user
      tags:
      - Authentication
      parameters:
      - name: signUpRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/SignUpRequest'
      responses:
        200:
          description: The result of the sign up operation
        400:
          description: Invalid request
          schema:
            $ref: './error.yml#/ErrorInfo'
        409:
          description: User already exists
          schema:
            $ref: './error.yml#/ErrorInfo'

  /confirm-sign-up:
    post:
      operationId: confirmSignUp
      summary: Confirms an unconfirmed user using a code sent by email
      tags:
      - Authentication
      parameters:
      - name: confirmSignUpRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/ConfirmSignUpRequest'
      responses:
        200:
          description: The result of the confirm operation
        400:
          description: Invalid request
          schema:
            $ref: './error.yml#/ErrorInfo'
        401:
          description: user confirmation failed due to invalid code
          schema:
            $ref: './error.yml#/ErrorInfo'

  /availability:
    post:
      operationId: checkAvailability
      summary: Check if an e-mail address or username is being used by an existing user
      tags:
      - Authentication
      parameters:
      - name: availabilityRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/AvailabilityRequest'
      responses:
        200:
          description: Indicates that the username or e-mail is available for use
        400:
          description: Invalid request
          schema:
            $ref: './error.yml#/ErrorInfo'
        409:
          description: Indiciates that the username or e-mail is already used

  #
  # /users CRUD operations
  #

  /users:
    get:
      operationId: getUsers
      summary: Gets a list of users (only for administrators, requires authentication)
      tags:
      - Users
      responses:
        200:
          description: A list of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      security:
      - jwtAuth: []
      - clientId: []
    put:
      operationId: updateUser
      summary: Update a user
      parameters:
      - in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: User attributes were successfully updated
        400:
          description: Invalid request
          schema:
            $ref: './error.yml#/ErrorInfo'
      security:
      - jwtAuth: []

  /users/{username}:
    parameters:
    - in: path
      name: username
      description: The username identifies the user
      required: true
      type: string
    get:
      operationId: getUser
      summary: Gets a user (only for administrators, requires authentication)
      tags:
      - Users
      responses:
        200:
          description: A user
          schema:
            $ref: '#/definitions/User'
      security:
      - jwtAuth: []

  /users/{username}/confirm:
    parameters:
    - in: path
      name: username
      description: The username identifies the user
      required: true
      type: string
    post:
      operationId: confirmUser
      summary: Marks a sign-up request as confirmed (only for administrators, requires authentication)
      tags:
      - Users
      responses:
        200:
          description: The user was successfully confirmed
      security:
      - jwtAuth: []

  /users/{username}/reset-password:
    parameters:
    - in: path
      name: username
      description: The username identifies the user
      required: true
      type: string
    post:
      operationId: resetUserPassword
      summary: Make a request to reset user password (only for administrators, requires authentication)
      tags:
      - Users
      responses:
        200:
          description: The user password was succesfully reset
      security:
      - jwtAuth: []

  #
  # /clients CRUD operations
  #

  /clients:
    get:
      operationId: getClients
      summary: Gets a list of clients
      tags:
      - Clients
      responses:
        200:
          description: A list of clients
          schema:
            type: array
            items:
              $ref: '#/definitions/ClientDetails'
      security:
      - jwtAuth: []
      - clientId: []
    post:
      operationId: createClient
      summary: Create a new client
      parameters:
      - in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/ClientDetails'
      responses:
        200:
          description: Client created successfully
          schema:
            $ref: '#/definitions/ClientDetails'
        400:
          description: |
            Indicates an invalid request. This can be due to missing or invalid fields.
            It can also be because the ClientId header is missing and the calling
            user belongs to multiple clients.
          schema:
            $ref: './error.yml#/ErrorInfo'
      security:
      - jwtAuth: []
      - clientId: []
    put:
      operationId: updateClient
      summary: Update an existing client
      parameters:
      - in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/ClientDetails'
      responses:
        200:
          description: Client attributes were successfully updated
          schema:
            $ref: '#/definitions/ClientDetails'
        400:
          description: Invalid request
          schema:
            $ref: './error.yml#/ErrorInfo'
      security:
      - jwtAuth: []

  /clients/{id}:
    parameters:
    - in: path
      name: id
      description: The id of the client
      required: true
      type: integer
      format: int64
      minimum: 1
    get:
      operationId: getClient
      summary: Gets a client
      tags:
      - Clients
      responses:
        200:
          description: A client
          schema:
            $ref: '#/definitions/ClientDetails'
      security:
      - jwtAuth: []

  /clients/{id}/roles:
    parameters:
    - in: path
      name: id
      description: The id of the client
      required: true
      type: integer
      format: int64
      minimum: 1
    get:
      operationId: getClientRoles
      summary: Gets the roles for a client
      tags:
      - Roles
      responses:
        200:
          description: A list of roles available for the specified client
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      security:
        jwtAuth: []
    post:
      operationId: createClientRole
      summary: Creates a new role for the client
      tags:
      - Roles
      parameters:
      - in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/Role'
      responses:
        200:

          description: Role created successfully
          schema:
            $ref: '#/definitions/Role'
        400:
          description: |
            Indicates an invalid request. This can be due to missing or invalid fields.
          schema:
            $ref: './error.yml#/ErrorInfo'
      security:
        jwtAuth: []
    put:
      operationId: updateClientRole
      summary: Updates a the role for the client
      tags:
      - Roles
      parameters:
      - in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/Role'
      responses:
        200:
          description: Role updated successfully
          schema:
            $ref: '#/definitions/Role'
        400:
          description: |
            Indicates an invalid request. This can be due to missing or invalid fields.
          schema:
            $ref: './error.yml#/ErrorInfo'
      security:
        jwtAuth: []

  /clients/{clientId}/roles/{roleId}:
    get:
      operationId: getClientRole
      summary: Gets a specific role for a client
      tags:
      - Roles
      responses:
        200:
          description: The requested role
          schema:
            $ref: '#/definitions/Role'
      parameters:
      - in: path
        name: clientId
        description: The id of the client
        required: true
        type: integer
        format: int64
        minimum: 1
      - in: path
        name: roleId
        description: The id of the role to search for
        required: true
        type: integer
        format: int64
        minimum: 1
      security:
        jwtAuth: []
    delete:
      operationId: deleteClientRole
      summary: Deletes a specific role
      tags:
      - Roles
      respones:
        200:
          description: Specified role is deleted
        404:
          description: The role to delete was not found.
      parameters:
      - in: path
        name: clientId
        description: The id of the client
        required: true
        type: integer
        format: int64
        minimum: 1
      - in: path
        name: roleId
        description: The id of the role to search for
        required: true
        type: integer
        format: int64
        minimum: 1

definitions:

  UserCredentials:
    type: object
    description: User credentials to authenticate against the service
    required:
    - username
    - password
    properties:
      username:
        type: string
        description: The username
        minLength: 1
        maxLength: 50
      password:
        type: string
        description: The password
        minLength: 6
        maxLength: 50

  CommonUserProperties:
    type: object
    description: Mandatory user properties
    required:
    - email
    - firstName
    - lastName
    properties:
      email:
        type: string
        description: The e-mail of the user
        minLength: 1
        maxLength: 250
      firstName:
        type: string
        description: The first name of the user
        minLength: 1
        maxLength: 100
      lastName:
        type: string
        description: The last name of the user
        minLength: 1
        maxLength: 100
      newsletterOptIn:
        type: boolean
        description: Indicates if the user is subscribed to the newletter

  SignUpRequest:
    type: object
    description: A request to sign up a user into the service
    allOf:
    - $ref: '#/definitions/UserCredentials'
    - $ref: '#/definitions/CommonUserProperties'

  ConfirmSignUpRequest:
    type: object
    description: A request to sign up a user into the service
    properties:
      code:
        type: string
        description: the code to use to confirm the user
        minLength: 1
        maxLength: 2048
      username:
        type: string
        description: The username
        minLength: 1
        maxLength: 50

  AvailabilityRequest:
    type: object
    description: A request to check if an e-mail or username is available
    properties:
      username:
        type: string
        description: The username
        minLength: 1
        maxLength: 50
      email:
        type: string
        description: The e-mail of the user
        minLength: 1
        maxLength: 250

  UserStatus:
    type: string
    description: User status can be one of UNCONFIRMED, CONFIRMED, ARCHIVED, COMPROMISED, UNKNOWN, RESET_REQUIRED, FORCE_CHANGE_PASSWORD
    enum:
    - UNCONFIRMED
    - CONFIRMED
    - ARCHIVED
    - COMPROMISED
    - UNKNOWN
    - RESET_REQUIRED
    - FORCE_CHANGE_PASSWORD

  Role:
    type: object
    description: Represents a role associated with a claim (e.g. Store Manager).
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the role.
      name:
        type: string
        description: The name of the role.
      description:
        type: string
        description: The long description of the role
      permissions:
        type: array
        description: The permissions that comprise the role.
        items:
          type: string
    required:
    - name

  Client:
    type: object
    description: |
      Represents a client associated with a claim. Please note that this object does
      not hold the full details of a client. If you are interested in the full details,
      see the /clients endpoint and the ClientDetails model.
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the client.
      name:
        type: string
        description: The name of the client.
        minLength: 1
        maxLength: 100
    required:
    - name

  Claim:
    type: object
    description: Represents the membership of a user in a client.
    properties:
      client:
        $ref: '#/definitions/Client'
      roles:
        type: array
        description: The roles that the user is assigned to within this client.
        items:
          $ref: '#/definitions/Role'

  ConfirmedUser:
    type: object
    description: Represents a user who is allowed to login. This object does not have a status property.
    allOf:
    - $ref: '#/definitions/CommonUserProperties'
    - type: object
      properties:
        username:
          type: string
          description: The username of the user
        claims:
          type: array
          description: The clients that the user is a member of
          items:
            $ref: '#/definitions/Claim'

  User:
    type: object
    description: Represents a user. This object is used in user management operations.
    allOf:
    - $ref: '#/definitions/ConfirmedUser'
    - type: object
      properties:
        status:
          $ref: '#/definitions/UserStatus'
          description: The user status

  LoginResult:
    type: object
    description: The result of the login operation includes the access token and the user details
    allOf:
    - $ref: '#/definitions/ConfirmedUser'
    - type: object
      properties:
        accessToken:
          type: string
          description: The access token to use for subsequent requests
        expiresIn:
          type: integer
          description: The amount of seconds the access token is valid from the moment is was given out
        refreshToken:
          type: string
          description: The refresh token used to refresh the access token

  TokenVerificationResult:
    type: object
    description: The result of the token verification includes the user details
    allOf:
    - $ref: '#/definitions/ConfirmedUser'

  BillingSchedule:
    type: string
    description: How frequently should billing be done. Values are WEEKLY and MONTHLY.
    enum:
    - WEEKLY
    - MONTHLY

  BillingInfo:
    type: object
    description: Holds billing information of a client.
    properties:
      schedule:
        $ref: '#/definitions/BillingSchedule'
        description: How frequently should billing be done. Values are WEEKLY and MONTHLY.
      currency:
        type: string
        description: Currency code for billing (e.g. EUR, USD, etc).
      vat:
        type: string
        description: The VAT number for billing.
      eori:
        type: string
        description: |
          Economic Operators Registration and Identification number.
          The EORI number is a unique identification number that
          companies are required to use when exchanging
          data with Customs in all EU Member States.
      additionalBillingEmail:
        type: string
        description: An optional additional e-mail address to receive billing updates.

  Address:
    type: object
    description: Contains address information.
    required:
    - firstName
    - lastName
    - addressLine1
    - postCode
    - city
    - country
    - contactInfo
    properties:
      firstName:
        type: string
        description: The first name of a person
        minLength: 1
      lastName:
        type: string
        description: The last name of a person
        minLength: 1
      company:
        type: string
        description: The company name, in case this is a company
      addressLine1:
        type: string
        description: The first address line
        minLength: 1
      addressLine2:
        type: string
        description: The second address line (optional)
      postCode:
        type: string
        description: The post code
        minLength: 1
      city:
        type: string
        description: The city
        minLength: 1
      country:
        type: string
        description: The country code
        minLength: 2
        maxLength: 2
      state:
        type: string
        description: The state code
        minLength: 2
        maxLength: 3
      contactInfo:
        $ref: '#/definitions/ContactInfo'
        description: Contact information

  ContactInfo:
    type: object
    description: Contant information
    required:
    - dialCode
    - telephone
    - email # mandatory here, unlike other services, because it is about invoicing
    properties:
      dialCode:
        type: string
        description: Area code or dial code
        minLength: 1
      telephone:
        type: string
        description: The telephone number
        minLength: 1
      email:
        type: string
        description: E-mail address for contacting
        minLength: 1

  ClientDetails:
    type: object
    description: Represents the full details of a client.
    allOf:
    - $ref: '#/definitions/Client'
    - type: object
      properties:
        address:
          $ref: '#/definitions/Address'
          description: The address of the client.
        billingInfo:
          $ref: '#/definitions/BillingInfo'
          description: Billing information of the client.
